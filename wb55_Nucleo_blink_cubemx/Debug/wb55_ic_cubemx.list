
wb55_ic_cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002150  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800228c  0800228c  0001228c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002338  08002338  00012338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000004  08002340  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000010  0800234c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000030  0800234c  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000082f4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001411  00000000  00000000  00028334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e08  00000000  00000000  00029748  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d60  00000000  00000000  0002a550  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001f3e6  00000000  00000000  0002b2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000079e1  00000000  00000000  0004a696  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ca97d  00000000  00000000  00052077  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0011c9f4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000038cc  00000000  00000000  0011ca70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08002274 	.word	0x08002274

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08002274 	.word	0x08002274

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000180:	f000 f93e 	bl	8000400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000184:	f000 f802 	bl	800018c <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000188:	e7fe      	b.n	8000188 <main+0xc>
	...

0800018c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b0ae      	sub	sp, #184	; 0xb8
 8000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000192:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000196:	2248      	movs	r2, #72	; 0x48
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f002 f862 	bl	8002264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
 80001a8:	605a      	str	r2, [r3, #4]
 80001aa:	609a      	str	r2, [r3, #8]
 80001ac:	60da      	str	r2, [r3, #12]
 80001ae:	611a      	str	r2, [r3, #16]
 80001b0:	615a      	str	r2, [r3, #20]
 80001b2:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2250      	movs	r2, #80	; 0x50
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f002 f852 	bl	8002264 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80001c0:	4b2c      	ldr	r3, [pc, #176]	; (8000274 <SystemClock_Config+0xe8>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80001c8:	4a2a      	ldr	r2, [pc, #168]	; (8000274 <SystemClock_Config+0xe8>)
 80001ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001ce:	6013      	str	r3, [r2, #0]
 80001d0:	4b28      	ldr	r3, [pc, #160]	; (8000274 <SystemClock_Config+0xe8>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80001d8:	603b      	str	r3, [r7, #0]
 80001da:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80001dc:	2322      	movs	r3, #34	; 0x22
 80001de:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80001e6:	2301      	movs	r3, #1
 80001e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ec:	2340      	movs	r3, #64	; 0x40
 80001ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80001f2:	2300      	movs	r3, #0
 80001f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80001f8:	2360      	movs	r3, #96	; 0x60
 80001fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001fe:	2300      	movs	r3, #0
 8000200:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fddf 	bl	8000dcc <HAL_RCC_OscConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000214:	f000 f830 	bl	8000278 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000218:	236f      	movs	r3, #111	; 0x6f
 800021a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800021c:	2300      	movs	r3, #0
 800021e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000234:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f001 f952 	bl	80014e4 <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000246:	f000 f817 	bl	8000278 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800024a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800024e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000250:	2300      	movs	r3, #0
 8000252:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000254:	2310      	movs	r3, #16
 8000256:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fd57 	bl	8001d0e <HAL_RCCEx_PeriphCLKConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000266:	f000 f807 	bl	8000278 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800026a:	bf00      	nop
 800026c:	37b8      	adds	r7, #184	; 0xb8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	58000400 	.word	0x58000400

08000278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800027c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800027e:	e7fe      	b.n	800027e <Error_Handler+0x6>

08000280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000292:	e7fe      	b.n	8000292 <NMI_Handler+0x4>

08000294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000298:	e7fe      	b.n	8000298 <HardFault_Handler+0x4>

0800029a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800029a:	b480      	push	{r7}
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800029e:	e7fe      	b.n	800029e <MemManage_Handler+0x4>

080002a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <BusFault_Handler+0x4>

080002a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002a6:	b480      	push	{r7}
 80002a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002aa:	e7fe      	b.n	80002aa <UsageFault_Handler+0x4>

080002ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr

080002ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002ba:	b480      	push	{r7}
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr

080002c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr

080002d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002da:	f000 f8eb 	bl	80004b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80002e8:	4b26      	ldr	r3, [pc, #152]	; (8000384 <SystemInit+0xa0>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80002ee:	4b25      	ldr	r3, [pc, #148]	; (8000384 <SystemInit+0xa0>)
 80002f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f4:	4a23      	ldr	r2, [pc, #140]	; (8000384 <SystemInit+0xa0>)
 80002f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80002fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800030e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000312:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000316:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000322:	4b19      	ldr	r3, [pc, #100]	; (8000388 <SystemInit+0xa4>)
 8000324:	4013      	ands	r3, r2
 8000326:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800032c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000334:	f023 0305 	bic.w	r3, r3, #5
 8000338:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800033c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000340:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000348:	f023 0301 	bic.w	r3, r3, #1
 800034c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000354:	4a0d      	ldr	r2, [pc, #52]	; (800038c <SystemInit+0xa8>)
 8000356:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800035c:	4a0b      	ldr	r2, [pc, #44]	; (800038c <SystemInit+0xa8>)
 800035e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800036a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800036e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	e000ed00 	.word	0xe000ed00
 8000388:	faf6fefb 	.word	0xfaf6fefb
 800038c:	22041000 	.word	0x22041000

08000390 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000390:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000392:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000394:	3304      	adds	r3, #4

08000396 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000396:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000398:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800039a:	d3f9      	bcc.n	8000390 <CopyDataInit>
  bx lr
 800039c:	4770      	bx	lr

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800039e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80003a0:	3004      	adds	r0, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80003a2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>
  bx lr
 80003a6:	4770      	bx	lr

080003a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a8:	480c      	ldr	r0, [pc, #48]	; (80003dc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80003aa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003ac:	f7ff ff9a 	bl	80002e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80003b0:	480b      	ldr	r0, [pc, #44]	; (80003e0 <LoopForever+0x8>)
 80003b2:	490c      	ldr	r1, [pc, #48]	; (80003e4 <LoopForever+0xc>)
 80003b4:	4a0c      	ldr	r2, [pc, #48]	; (80003e8 <LoopForever+0x10>)
 80003b6:	2300      	movs	r3, #0
 80003b8:	f7ff ffed 	bl	8000396 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80003bc:	480b      	ldr	r0, [pc, #44]	; (80003ec <LoopForever+0x14>)
 80003be:	490c      	ldr	r1, [pc, #48]	; (80003f0 <LoopForever+0x18>)
 80003c0:	2300      	movs	r3, #0
 80003c2:	f7ff ffee 	bl	80003a2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80003c6:	480b      	ldr	r0, [pc, #44]	; (80003f4 <LoopForever+0x1c>)
 80003c8:	490b      	ldr	r1, [pc, #44]	; (80003f8 <LoopForever+0x20>)
 80003ca:	2300      	movs	r3, #0
 80003cc:	f7ff ffe9 	bl	80003a2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d0:	f001 ff24 	bl	800221c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80003d4:	f7ff fed2 	bl	800017c <main>

080003d8 <LoopForever>:

LoopForever:
  b LoopForever
 80003d8:	e7fe      	b.n	80003d8 <LoopForever>
 80003da:	0000      	.short	0x0000
  ldr   r0, =_estack
 80003dc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80003e0:	20000004 	.word	0x20000004
 80003e4:	20000010 	.word	0x20000010
 80003e8:	08002340 	.word	0x08002340
  INIT_BSS _sbss, _ebss
 80003ec:	20000010 	.word	0x20000010
 80003f0:	20000030 	.word	0x20000030
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80003f4:	20030000 	.word	0x20030000
 80003f8:	20030000 	.word	0x20030000

080003fc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC1_IRQHandler>
	...

08000400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000406:	2300      	movs	r3, #0
 8000408:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <HAL_Init+0x3c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a0b      	ldr	r2, [pc, #44]	; (800043c <HAL_Init+0x3c>)
 8000410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000414:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000416:	2003      	movs	r0, #3
 8000418:	f000 f92a 	bl	8000670 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800041c:	2000      	movs	r0, #0
 800041e:	f000 f80f 	bl	8000440 <HAL_InitTick>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d002      	beq.n	800042e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000428:	2301      	movs	r3, #1
 800042a:	71fb      	strb	r3, [r7, #7]
 800042c:	e001      	b.n	8000432 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800042e:	f7ff ff27 	bl	8000280 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000432:	79fb      	ldrb	r3, [r7, #7]
}
 8000434:	4618      	mov	r0, r3
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	58004000 	.word	0x58004000

08000440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000448:	2300      	movs	r3, #0
 800044a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800044c:	4b17      	ldr	r3, [pc, #92]	; (80004ac <HAL_InitTick+0x6c>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d024      	beq.n	800049e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000454:	f001 f9f2 	bl	800183c <HAL_RCC_GetHCLKFreq>
 8000458:	4602      	mov	r2, r0
 800045a:	4b14      	ldr	r3, [pc, #80]	; (80004ac <HAL_InitTick+0x6c>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	4619      	mov	r1, r3
 8000460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000464:	fbb3 f3f1 	udiv	r3, r3, r1
 8000468:	fbb2 f3f3 	udiv	r3, r2, r3
 800046c:	4618      	mov	r0, r3
 800046e:	f000 f924 	bl	80006ba <HAL_SYSTICK_Config>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d10f      	bne.n	8000498 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b0f      	cmp	r3, #15
 800047c:	d809      	bhi.n	8000492 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800047e:	2200      	movs	r2, #0
 8000480:	6879      	ldr	r1, [r7, #4]
 8000482:	f04f 30ff 	mov.w	r0, #4294967295
 8000486:	f000 f8fe 	bl	8000686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800048a:	4a09      	ldr	r2, [pc, #36]	; (80004b0 <HAL_InitTick+0x70>)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	6013      	str	r3, [r2, #0]
 8000490:	e007      	b.n	80004a2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000492:	2301      	movs	r3, #1
 8000494:	73fb      	strb	r3, [r7, #15]
 8000496:	e004      	b.n	80004a2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000498:	2301      	movs	r3, #1
 800049a:	73fb      	strb	r3, [r7, #15]
 800049c:	e001      	b.n	80004a2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800049e:	2301      	movs	r3, #1
 80004a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3710      	adds	r7, #16
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	2000000c 	.word	0x2000000c
 80004b0:	20000008 	.word	0x20000008

080004b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_IncTick+0x20>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	461a      	mov	r2, r3
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <HAL_IncTick+0x24>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4413      	add	r3, r2
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <HAL_IncTick+0x24>)
 80004c6:	6013      	str	r3, [r2, #0]
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	2000000c 	.word	0x2000000c
 80004d8:	2000002c 	.word	0x2000002c

080004dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return uwTick;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <HAL_GetTick+0x14>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	2000002c 	.word	0x2000002c

080004f4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <HAL_GetTickPrio+0x14>)
 80004fa:	681b      	ldr	r3, [r3, #0]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000008 	.word	0x20000008

0800050c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f003 0307 	and.w	r3, r3, #7
 800051a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <__NVIC_SetPriorityGrouping+0x44>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000528:	4013      	ands	r3, r2
 800052a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800053e:	4a04      	ldr	r2, [pc, #16]	; (8000550 <__NVIC_SetPriorityGrouping+0x44>)
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	60d3      	str	r3, [r2, #12]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <__NVIC_GetPriorityGrouping+0x18>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	f003 0307 	and.w	r3, r3, #7
}
 8000562:	4618      	mov	r0, r3
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800057c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000580:	2b00      	cmp	r3, #0
 8000582:	db0a      	blt.n	800059a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	b2da      	uxtb	r2, r3
 8000588:	490c      	ldr	r1, [pc, #48]	; (80005bc <__NVIC_SetPriority+0x4c>)
 800058a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058e:	0112      	lsls	r2, r2, #4
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	440b      	add	r3, r1
 8000594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000598:	e00a      	b.n	80005b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4908      	ldr	r1, [pc, #32]	; (80005c0 <__NVIC_SetPriority+0x50>)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	f003 030f 	and.w	r3, r3, #15
 80005a6:	3b04      	subs	r3, #4
 80005a8:	0112      	lsls	r2, r2, #4
 80005aa:	b2d2      	uxtb	r2, r2
 80005ac:	440b      	add	r3, r1
 80005ae:	761a      	strb	r2, [r3, #24]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	e000e100 	.word	0xe000e100
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b089      	sub	sp, #36	; 0x24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	f1c3 0307 	rsb	r3, r3, #7
 80005de:	2b04      	cmp	r3, #4
 80005e0:	bf28      	it	cs
 80005e2:	2304      	movcs	r3, #4
 80005e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	3304      	adds	r3, #4
 80005ea:	2b06      	cmp	r3, #6
 80005ec:	d902      	bls.n	80005f4 <NVIC_EncodePriority+0x30>
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	3b03      	subs	r3, #3
 80005f2:	e000      	b.n	80005f6 <NVIC_EncodePriority+0x32>
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	f04f 32ff 	mov.w	r2, #4294967295
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	43da      	mvns	r2, r3
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	401a      	ands	r2, r3
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800060c:	f04f 31ff 	mov.w	r1, #4294967295
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	43d9      	mvns	r1, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061c:	4313      	orrs	r3, r2
         );
}
 800061e:	4618      	mov	r0, r3
 8000620:	3724      	adds	r7, #36	; 0x24
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3b01      	subs	r3, #1
 8000638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800063c:	d301      	bcc.n	8000642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800063e:	2301      	movs	r3, #1
 8000640:	e00f      	b.n	8000662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <SysTick_Config+0x40>)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3b01      	subs	r3, #1
 8000648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800064a:	210f      	movs	r1, #15
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	f7ff ff8e 	bl	8000570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <SysTick_Config+0x40>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <SysTick_Config+0x40>)
 800065c:	2207      	movs	r2, #7
 800065e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	e000e010 	.word	0xe000e010

08000670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff ff47 	bl	800050c <__NVIC_SetPriorityGrouping>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b086      	sub	sp, #24
 800068a:	af00      	add	r7, sp, #0
 800068c:	4603      	mov	r3, r0
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	607a      	str	r2, [r7, #4]
 8000692:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000694:	f7ff ff5e 	bl	8000554 <__NVIC_GetPriorityGrouping>
 8000698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	6978      	ldr	r0, [r7, #20]
 80006a0:	f7ff ff90 	bl	80005c4 <NVIC_EncodePriority>
 80006a4:	4602      	mov	r2, r0
 80006a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006aa:	4611      	mov	r1, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff5f 	bl	8000570 <__NVIC_SetPriority>
}
 80006b2:	bf00      	nop
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff ffb2 	bl	800062c <SysTick_Config>
 80006c8:	4603      	mov	r3, r0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80006de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	58000400 	.word	0x58000400

080006f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <HAL_PWREx_GetVoltageRange+0x18>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	58000400 	.word	0x58000400

08000710 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800071e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000722:	d101      	bne.n	8000728 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000724:	2301      	movs	r3, #1
 8000726:	e000      	b.n	800072a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000764:	6013      	str	r3, [r2, #0]
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000782:	d101      	bne.n	8000788 <LL_RCC_HSE_IsReady+0x18>
 8000784:	2301      	movs	r3, #1
 8000786:	e000      	b.n	800078a <LL_RCC_HSE_IsReady+0x1a>
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80007b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007c4:	6013      	str	r3, [r2, #0]
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80007d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007e2:	d101      	bne.n	80007e8 <LL_RCC_HSI_IsReady+0x18>
 80007e4:	2301      	movs	r3, #1
 80007e6:	e000      	b.n	80007ea <LL_RCC_HSI_IsReady+0x1a>
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80007fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	061b      	lsls	r3, r3, #24
 800080a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800080e:	4313      	orrs	r3, r2
 8000810:	604b      	str	r3, [r1, #4]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800082a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000848:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800084c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000850:	f023 0301 	bic.w	r3, r3, #1
 8000854:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800086a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	2b02      	cmp	r3, #2
 8000874:	d101      	bne.n	800087a <LL_RCC_HSI48_IsReady+0x18>
 8000876:	2301      	movs	r3, #1
 8000878:	e000      	b.n	800087c <LL_RCC_HSI48_IsReady+0x1a>
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800088a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80008ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008b8:	f023 0301 	bic.w	r3, r3, #1
 80008bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80008ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80008f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008fc:	f023 0304 	bic.w	r3, r3, #4
 8000900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	2b02      	cmp	r3, #2
 8000920:	d101      	bne.n	8000926 <LL_RCC_LSE_IsReady+0x18>
 8000922:	2301      	movs	r3, #1
 8000924:	e000      	b.n	8000928 <LL_RCC_LSE_IsReady+0x1a>
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800093e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800095c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000964:	f023 0301 	bic.w	r3, r3, #1
 8000968:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800097a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800097e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	2b02      	cmp	r3, #2
 8000988:	d101      	bne.n	800098e <LL_RCC_LSI1_IsReady+0x18>
 800098a:	2301      	movs	r3, #1
 800098c:	e000      	b.n	8000990 <LL_RCC_LSI1_IsReady+0x1a>
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800099e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80009c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009cc:	f023 0304 	bic.w	r3, r3, #4
 80009d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80009e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	2b08      	cmp	r3, #8
 80009f0:	d101      	bne.n	80009f6 <LL_RCC_LSI2_IsReady+0x18>
 80009f2:	2301      	movs	r3, #1
 80009f4:	e000      	b.n	80009f8 <LL_RCC_LSI2_IsReady+0x1a>
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a12:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a5c:	f023 0301 	bic.w	r3, r3, #1
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d101      	bne.n	8000a82 <LL_RCC_MSI_IsReady+0x16>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e000      	b.n	8000a84 <LL_RCC_MSI_IsReady+0x18>
 8000a82:	2300      	movs	r3, #0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000aa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	600b      	str	r3, [r1, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ac6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2bb0      	cmp	r3, #176	; 0xb0
 8000acc:	d901      	bls.n	8000ad2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8000ace:	23b0      	movs	r3, #176	; 0xb0
 8000ad0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8000ad2:	687b      	ldr	r3, [r7, #4]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000afa:	4313      	orrs	r3, r2
 8000afc:	604b      	str	r3, [r1, #4]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f023 0203 	bic.w	r2, r3, #3
 8000b1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	608b      	str	r3, [r1, #8]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	f003 030c 	and.w	r3, r3, #12
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	608b      	str	r3, [r1, #8]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000baa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000bae:	f023 020f 	bic.w	r2, r3, #15
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	091b      	lsrs	r3, r3, #4
 8000bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	608b      	str	r3, [r1, #8]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	608b      	str	r3, [r1, #8]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000c40:	011b      	lsls	r3, r3, #4
 8000c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c80:	6013      	str	r3, [r2, #0]
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c9e:	d101      	bne.n	8000ca4 <LL_RCC_PLL_IsReady+0x18>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <LL_RCC_PLL_IsReady+0x1a>
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	f003 0303 	and.w	r3, r3, #3
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d24:	d101      	bne.n	8000d2a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8000d26:	2301      	movs	r3, #1
 8000d28:	e000      	b.n	8000d2c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8000d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d4a:	d101      	bne.n	8000d50 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8000d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d70:	d101      	bne.n	8000d76 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8000d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d94:	d101      	bne.n	8000d9a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8000daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000db8:	d101      	bne.n	8000dbe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b08d      	sub	sp, #52	; 0x34
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e37e      	b.n	80014dc <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0320 	and.w	r3, r3, #32
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 8092 	beq.w	8000f10 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dec:	f7ff fea1 	bl	8000b32 <LL_RCC_GetSysClkSource>
 8000df0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000df2:	f7ff ff82 	bl	8000cfa <LL_RCC_PLL_GetMainSource>
 8000df6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d005      	beq.n	8000e0a <HAL_RCC_OscConfig+0x3e>
 8000dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e00:	2b0c      	cmp	r3, #12
 8000e02:	d14c      	bne.n	8000e9e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8000e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d149      	bne.n	8000e9e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e0a:	f7ff fe2f 	bl	8000a6c <LL_RCC_MSI_IsReady>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d005      	beq.n	8000e20 <HAL_RCC_OscConfig+0x54>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d101      	bne.n	8000e20 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e35d      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000e24:	f7ff fe47 	bl	8000ab6 <LL_RCC_MSI_GetRange>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	429c      	cmp	r4, r3
 8000e2c:	d914      	bls.n	8000e58 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fd16 	bl	8001864 <RCC_SetFlashLatencyFromMSIRange>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e34c      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fe21 	bl	8000a8e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fe45 	bl	8000ae0 <LL_RCC_MSI_SetCalibTrimming>
 8000e56:	e013      	b.n	8000e80 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fe16 	bl	8000a8e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fe3a 	bl	8000ae0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fcf7 	bl	8001864 <RCC_SetFlashLatencyFromMSIRange>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e32d      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000e80:	f000 fcdc 	bl	800183c <HAL_RCC_GetHCLKFreq>
 8000e84:	4602      	mov	r2, r0
 8000e86:	4bb3      	ldr	r3, [pc, #716]	; (8001154 <HAL_RCC_OscConfig+0x388>)
 8000e88:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e8a:	4bb3      	ldr	r3, [pc, #716]	; (8001158 <HAL_RCC_OscConfig+0x38c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fad6 	bl	8000440 <HAL_InitTick>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d039      	beq.n	8000f0e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e31e      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d01e      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ea6:	f7ff fdc3 	bl	8000a30 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fb17 	bl	80004dc <HAL_GetTick>
 8000eae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000eb2:	f7ff fb13 	bl	80004dc <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e30b      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8000ec4:	f7ff fdd2 	bl	8000a6c <LL_RCC_MSI_IsReady>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f1      	beq.n	8000eb2 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fddb 	bl	8000a8e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fdff 	bl	8000ae0 <LL_RCC_MSI_SetCalibTrimming>
 8000ee2:	e015      	b.n	8000f10 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ee4:	f7ff fdb3 	bl	8000a4e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff faf8 	bl	80004dc <HAL_GetTick>
 8000eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ef0:	f7ff faf4 	bl	80004dc <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e2ec      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8000f02:	f7ff fdb3 	bl	8000a6c <LL_RCC_MSI_IsReady>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1f1      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x124>
 8000f0c:	e000      	b.n	8000f10 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f0e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d04e      	beq.n	8000fba <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f1c:	f7ff fe09 	bl	8000b32 <LL_RCC_GetSysClkSource>
 8000f20:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f22:	f7ff feea 	bl	8000cfa <LL_RCC_PLL_GetMainSource>
 8000f26:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d005      	beq.n	8000f3a <HAL_RCC_OscConfig+0x16e>
 8000f2e:	6a3b      	ldr	r3, [r7, #32]
 8000f30:	2b0c      	cmp	r3, #12
 8000f32:	d10d      	bne.n	8000f50 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d10a      	bne.n	8000f50 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3a:	f7ff fc19 	bl	8000770 <LL_RCC_HSE_IsReady>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d039      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x1ec>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d135      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e2c5      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f58:	d102      	bne.n	8000f60 <HAL_RCC_OscConfig+0x194>
 8000f5a:	f7ff fbeb 	bl	8000734 <LL_RCC_HSE_Enable>
 8000f5e:	e001      	b.n	8000f64 <HAL_RCC_OscConfig+0x198>
 8000f60:	f7ff fbf7 	bl	8000752 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d012      	beq.n	8000f92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fab6 	bl	80004dc <HAL_GetTick>
 8000f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f74:	f7ff fab2 	bl	80004dc <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b64      	cmp	r3, #100	; 0x64
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e2aa      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8000f86:	f7ff fbf3 	bl	8000770 <LL_RCC_HSE_IsReady>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f1      	beq.n	8000f74 <HAL_RCC_OscConfig+0x1a8>
 8000f90:	e013      	b.n	8000fba <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f92:	f7ff faa3 	bl	80004dc <HAL_GetTick>
 8000f96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f9a:	f7ff fa9f 	bl	80004dc <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b64      	cmp	r3, #100	; 0x64
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e297      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8000fac:	f7ff fbe0 	bl	8000770 <LL_RCC_HSE_IsReady>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f1      	bne.n	8000f9a <HAL_RCC_OscConfig+0x1ce>
 8000fb6:	e000      	b.n	8000fba <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d051      	beq.n	800106a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fc6:	f7ff fdb4 	bl	8000b32 <LL_RCC_GetSysClkSource>
 8000fca:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fcc:	f7ff fe95 	bl	8000cfa <LL_RCC_PLL_GetMainSource>
 8000fd0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d005      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x218>
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	2b0c      	cmp	r3, #12
 8000fdc:	d113      	bne.n	8001006 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d110      	bne.n	8001006 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fe4:	f7ff fbf4 	bl	80007d0 <LL_RCC_HSI_IsReady>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d005      	beq.n	8000ffa <HAL_RCC_OscConfig+0x22e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e270      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fbf8 	bl	80007f4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001004:	e031      	b.n	800106a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d019      	beq.n	8001042 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800100e:	f7ff fbc1 	bl	8000794 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001012:	f7ff fa63 	bl	80004dc <HAL_GetTick>
 8001016:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101a:	f7ff fa5f 	bl	80004dc <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e257      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 800102c:	f7ff fbd0 	bl	80007d0 <LL_RCC_HSI_IsReady>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0f1      	beq.n	800101a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fbda 	bl	80007f4 <LL_RCC_HSI_SetCalibTrimming>
 8001040:	e013      	b.n	800106a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001042:	f7ff fbb6 	bl	80007b2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001046:	f7ff fa49 	bl	80004dc <HAL_GetTick>
 800104a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800104e:	f7ff fa45 	bl	80004dc <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e23d      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001060:	f7ff fbb6 	bl	80007d0 <LL_RCC_HSI_IsReady>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f1      	bne.n	800104e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	2b00      	cmp	r3, #0
 8001074:	d106      	bne.n	8001084 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 80a3 	beq.w	80011ca <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d076      	beq.n	800117a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0310 	and.w	r3, r3, #16
 8001094:	2b00      	cmp	r3, #0
 8001096:	d046      	beq.n	8001126 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001098:	f7ff fc6d 	bl	8000976 <LL_RCC_LSI1_IsReady>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d113      	bne.n	80010ca <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80010a2:	f7ff fc46 	bl	8000932 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80010a6:	f7ff fa19 	bl	80004dc <HAL_GetTick>
 80010aa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80010ae:	f7ff fa15 	bl	80004dc <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e20d      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80010c0:	f7ff fc59 	bl	8000976 <LL_RCC_LSI1_IsReady>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f1      	beq.n	80010ae <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80010ca:	f7ff fc66 	bl	800099a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ce:	f7ff fa05 	bl	80004dc <HAL_GetTick>
 80010d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80010d6:	f7ff fa01 	bl	80004dc <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e1f9      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80010e8:	f7ff fc79 	bl	80009de <LL_RCC_LSI2_IsReady>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f1      	beq.n	80010d6 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fc83 	bl	8000a02 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80010fc:	f7ff fc2a 	bl	8000954 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001100:	f7ff f9ec 	bl	80004dc <HAL_GetTick>
 8001104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001108:	f7ff f9e8 	bl	80004dc <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e1e0      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800111a:	f7ff fc2c 	bl	8000976 <LL_RCC_LSI1_IsReady>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f1      	bne.n	8001108 <HAL_RCC_OscConfig+0x33c>
 8001124:	e051      	b.n	80011ca <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001126:	f7ff fc04 	bl	8000932 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112a:	f7ff f9d7 	bl	80004dc <HAL_GetTick>
 800112e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001132:	f7ff f9d3 	bl	80004dc <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e1cb      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001144:	f7ff fc17 	bl	8000976 <LL_RCC_LSI1_IsReady>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f1      	beq.n	8001132 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800114e:	f7ff fc35 	bl	80009bc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001152:	e00c      	b.n	800116e <HAL_RCC_OscConfig+0x3a2>
 8001154:	20000004 	.word	0x20000004
 8001158:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800115c:	f7ff f9be 	bl	80004dc <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b03      	cmp	r3, #3
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e1b6      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800116e:	f7ff fc36 	bl	80009de <LL_RCC_LSI2_IsReady>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f1      	bne.n	800115c <HAL_RCC_OscConfig+0x390>
 8001178:	e027      	b.n	80011ca <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800117a:	f7ff fc1f 	bl	80009bc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800117e:	f7ff f9ad 	bl	80004dc <HAL_GetTick>
 8001182:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001186:	f7ff f9a9 	bl	80004dc <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b03      	cmp	r3, #3
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e1a1      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001198:	f7ff fc21 	bl	80009de <LL_RCC_LSI2_IsReady>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f1      	bne.n	8001186 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80011a2:	f7ff fbd7 	bl	8000954 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a6:	f7ff f999 	bl	80004dc <HAL_GetTick>
 80011aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80011ae:	f7ff f995 	bl	80004dc <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e18d      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80011c0:	f7ff fbd9 	bl	8000976 <LL_RCC_LSI1_IsReady>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f1      	bne.n	80011ae <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d05b      	beq.n	800128e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d6:	4bb5      	ldr	r3, [pc, #724]	; (80014ac <HAL_RCC_OscConfig+0x6e0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d114      	bne.n	800120c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80011e2:	f7ff fa77 	bl	80006d4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011e6:	f7ff f979 	bl	80004dc <HAL_GetTick>
 80011ea:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ee:	f7ff f975 	bl	80004dc <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e16d      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001200:	4baa      	ldr	r3, [pc, #680]	; (80014ac <HAL_RCC_OscConfig+0x6e0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d102      	bne.n	800121a <HAL_RCC_OscConfig+0x44e>
 8001214:	f7ff fb37 	bl	8000886 <LL_RCC_LSE_Enable>
 8001218:	e00c      	b.n	8001234 <HAL_RCC_OscConfig+0x468>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b05      	cmp	r3, #5
 8001220:	d104      	bne.n	800122c <HAL_RCC_OscConfig+0x460>
 8001222:	f7ff fb52 	bl	80008ca <LL_RCC_LSE_EnableBypass>
 8001226:	f7ff fb2e 	bl	8000886 <LL_RCC_LSE_Enable>
 800122a:	e003      	b.n	8001234 <HAL_RCC_OscConfig+0x468>
 800122c:	f7ff fb3c 	bl	80008a8 <LL_RCC_LSE_Disable>
 8001230:	f7ff fb5c 	bl	80008ec <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d014      	beq.n	8001266 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123c:	f7ff f94e 	bl	80004dc <HAL_GetTick>
 8001240:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001242:	e00a      	b.n	800125a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001244:	f7ff f94a 	bl	80004dc <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001252:	4293      	cmp	r3, r2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e140      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800125a:	f7ff fb58 	bl	800090e <LL_RCC_LSE_IsReady>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0ef      	beq.n	8001244 <HAL_RCC_OscConfig+0x478>
 8001264:	e013      	b.n	800128e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001266:	f7ff f939 	bl	80004dc <HAL_GetTick>
 800126a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800126c:	e00a      	b.n	8001284 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126e:	f7ff f935 	bl	80004dc <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	f241 3288 	movw	r2, #5000	; 0x1388
 800127c:	4293      	cmp	r3, r2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e12b      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001284:	f7ff fb43 	bl	800090e <LL_RCC_LSE_IsReady>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1ef      	bne.n	800126e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001296:	2b00      	cmp	r3, #0
 8001298:	d02c      	beq.n	80012f4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d014      	beq.n	80012cc <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012a2:	f7ff fabc 	bl	800081e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a6:	f7ff f919 	bl	80004dc <HAL_GetTick>
 80012aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ae:	f7ff f915 	bl	80004dc <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e10d      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80012c0:	f7ff facf 	bl	8000862 <LL_RCC_HSI48_IsReady>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f1      	beq.n	80012ae <HAL_RCC_OscConfig+0x4e2>
 80012ca:	e013      	b.n	80012f4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012cc:	f7ff fab8 	bl	8000840 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d0:	f7ff f904 	bl	80004dc <HAL_GetTick>
 80012d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012d8:	f7ff f900 	bl	80004dc <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e0f8      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80012ea:	f7ff faba 	bl	8000862 <LL_RCC_HSI48_IsReady>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f1      	bne.n	80012d8 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80ee 	beq.w	80014da <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012fe:	f7ff fc18 	bl	8000b32 <LL_RCC_GetSysClkSource>
 8001302:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	2b02      	cmp	r3, #2
 8001312:	f040 80af 	bne.w	8001474 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f003 0203 	and.w	r2, r3, #3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	429a      	cmp	r2, r3
 8001322:	d123      	bne.n	800136c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132e:	429a      	cmp	r2, r3
 8001330:	d11c      	bne.n	800136c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800133e:	429a      	cmp	r2, r3
 8001340:	d114      	bne.n	800136c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800134c:	429a      	cmp	r2, r3
 800134e:	d10d      	bne.n	800136c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800135a:	429a      	cmp	r2, r3
 800135c:	d106      	bne.n	800136c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001368:	429a      	cmp	r2, r3
 800136a:	d05d      	beq.n	8001428 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	2b0c      	cmp	r3, #12
 8001370:	d058      	beq.n	8001424 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0ab      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001384:	f7ff fc73 	bl	8000c6e <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001388:	f7ff f8a8 	bl	80004dc <HAL_GetTick>
 800138c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001390:	f7ff f8a4 	bl	80004dc <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e09c      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1ef      	bne.n	8001390 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	4b3e      	ldr	r3, [pc, #248]	; (80014b0 <HAL_RCC_OscConfig+0x6e4>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013c2:	4311      	orrs	r1, r2
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013c8:	0212      	lsls	r2, r2, #8
 80013ca:	4311      	orrs	r1, r2
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013d0:	4311      	orrs	r1, r2
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013d6:	4311      	orrs	r1, r2
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013dc:	430a      	orrs	r2, r1
 80013de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013e6:	f7ff fc33 	bl	8000c50 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013fa:	f7ff f86f 	bl	80004dc <HAL_GetTick>
 80013fe:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff f86b 	bl	80004dc <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e063      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0ef      	beq.n	8001402 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001422:	e05a      	b.n	80014da <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e059      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d151      	bne.n	80014da <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001436:	f7ff fc0b 	bl	8000c50 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800143a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800144a:	f7ff f847 	bl	80004dc <HAL_GetTick>
 800144e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001452:	f7ff f843 	bl	80004dc <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e03b      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0ef      	beq.n	8001452 <HAL_RCC_OscConfig+0x686>
 8001472:	e032      	b.n	80014da <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d02d      	beq.n	80014d6 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147a:	f7ff fbf8 	bl	8000c6e <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800147e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001488:	f023 0303 	bic.w	r3, r3, #3
 800148c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800148e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001498:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800149c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a2:	f7ff f81b 	bl	80004dc <HAL_GetTick>
 80014a6:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a8:	e00d      	b.n	80014c6 <HAL_RCC_OscConfig+0x6fa>
 80014aa:	bf00      	nop
 80014ac:	58000400 	.word	0x58000400
 80014b0:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff f812 	bl	80004dc <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1ef      	bne.n	80014b4 <HAL_RCC_OscConfig+0x6e8>
 80014d4:	e001      	b.n	80014da <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3734      	adds	r7, #52	; 0x34
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd90      	pop	{r4, r7, pc}

080014e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e12d      	b.n	8001754 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014f8:	4b98      	ldr	r3, [pc, #608]	; (800175c <HAL_RCC_ClockConfig+0x278>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d91b      	bls.n	800153e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001506:	4b95      	ldr	r3, [pc, #596]	; (800175c <HAL_RCC_ClockConfig+0x278>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 0207 	bic.w	r2, r3, #7
 800150e:	4993      	ldr	r1, [pc, #588]	; (800175c <HAL_RCC_ClockConfig+0x278>)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001516:	f7fe ffe1 	bl	80004dc <HAL_GetTick>
 800151a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151c:	e008      	b.n	8001530 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800151e:	f7fe ffdd 	bl	80004dc <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e111      	b.n	8001754 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001530:	4b8a      	ldr	r3, [pc, #552]	; (800175c <HAL_RCC_ClockConfig+0x278>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d1ef      	bne.n	800151e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d016      	beq.n	8001578 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fafb 	bl	8000b4a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001554:	f7fe ffc2 	bl	80004dc <HAL_GetTick>
 8001558:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800155c:	f7fe ffbe 	bl	80004dc <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e0f2      	b.n	8001754 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800156e:	f7ff fbd0 	bl	8000d12 <LL_RCC_IsActiveFlag_HPRE>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f1      	beq.n	800155c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0320 	and.w	r3, r3, #32
 8001580:	2b00      	cmp	r3, #0
 8001582:	d016      	beq.n	80015b2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff faf2 	bl	8000b72 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800158e:	f7fe ffa5 	bl	80004dc <HAL_GetTick>
 8001592:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001596:	f7fe ffa1 	bl	80004dc <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e0d5      	b.n	8001754 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80015a8:	f7ff fbc5 	bl	8000d36 <LL_RCC_IsActiveFlag_C2HPRE>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f1      	beq.n	8001596 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d016      	beq.n	80015ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff faeb 	bl	8000b9e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80015c8:	f7fe ff88 	bl	80004dc <HAL_GetTick>
 80015cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80015d0:	f7fe ff84 	bl	80004dc <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e0b8      	b.n	8001754 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80015e2:	f7ff fbbb 	bl	8000d5c <LL_RCC_IsActiveFlag_SHDHPRE>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f1      	beq.n	80015d0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d016      	beq.n	8001626 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fae5 	bl	8000bcc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001602:	f7fe ff6b 	bl	80004dc <HAL_GetTick>
 8001606:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800160a:	f7fe ff67 	bl	80004dc <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e09b      	b.n	8001754 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800161c:	f7ff fbb1 	bl	8000d82 <LL_RCC_IsActiveFlag_PPRE1>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f1      	beq.n	800160a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d017      	beq.n	8001662 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fadb 	bl	8000bf4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800163e:	f7fe ff4d 	bl	80004dc <HAL_GetTick>
 8001642:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001646:	f7fe ff49 	bl	80004dc <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e07d      	b.n	8001754 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001658:	f7ff fba5 	bl	8000da6 <LL_RCC_IsActiveFlag_PPRE2>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f1      	beq.n	8001646 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d043      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d106      	bne.n	8001684 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001676:	f7ff f87b 	bl	8000770 <LL_RCC_HSE_IsReady>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d11e      	bne.n	80016be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e067      	b.n	8001754 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d106      	bne.n	800169a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800168c:	f7ff fafe 	bl	8000c8c <LL_RCC_PLL_IsReady>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d113      	bne.n	80016be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e05c      	b.n	8001754 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80016a2:	f7ff f9e3 	bl	8000a6c <LL_RCC_MSI_IsReady>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d108      	bne.n	80016be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e051      	b.n	8001754 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80016b0:	f7ff f88e 	bl	80007d0 <LL_RCC_HSI_IsReady>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e04a      	b.n	8001754 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fa21 	bl	8000b0a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016c8:	f7fe ff08 	bl	80004dc <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d0:	f7fe ff04 	bl	80004dc <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e036      	b.n	8001754 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	f7ff fa24 	bl	8000b32 <LL_RCC_GetSysClkSource>
 80016ea:	4602      	mov	r2, r0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d1ec      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_RCC_ClockConfig+0x278>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d21b      	bcs.n	800173c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_RCC_ClockConfig+0x278>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 0207 	bic.w	r2, r3, #7
 800170c:	4913      	ldr	r1, [pc, #76]	; (800175c <HAL_RCC_ClockConfig+0x278>)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001714:	f7fe fee2 	bl	80004dc <HAL_GetTick>
 8001718:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	e008      	b.n	800172e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800171c:	f7fe fede 	bl	80004dc <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e012      	b.n	8001754 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_ClockConfig+0x278>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d1ef      	bne.n	800171c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800173c:	f000 f87e 	bl	800183c <HAL_RCC_GetHCLKFreq>
 8001740:	4602      	mov	r2, r0
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <HAL_RCC_ClockConfig+0x27c>)
 8001744:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001746:	f7fe fed5 	bl	80004f4 <HAL_GetTickPrio>
 800174a:	4603      	mov	r3, r0
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fe77 	bl	8000440 <HAL_InitTick>
 8001752:	4603      	mov	r3, r0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	58004000 	.word	0x58004000
 8001760:	20000004 	.word	0x20000004

08001764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800176a:	f7ff f9e2 	bl	8000b32 <LL_RCC_GetSysClkSource>
 800176e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10a      	bne.n	800178c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001776:	f7ff f99e 	bl	8000ab6 <LL_RCC_MSI_GetRange>
 800177a:	4603      	mov	r3, r0
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	4a2a      	ldr	r2, [pc, #168]	; (800182c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e04a      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d102      	bne.n	8001798 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e044      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b08      	cmp	r3, #8
 800179c:	d10a      	bne.n	80017b4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800179e:	f7fe ffb7 	bl	8000710 <LL_RCC_HSE_IsEnabledDiv2>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d102      	bne.n	80017ae <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_RCC_GetSysClockFreq+0xd0>)
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	e039      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80017ae:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_RCC_GetSysClockFreq+0xd4>)
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	e036      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80017b4:	f7ff faa1 	bl	8000cfa <LL_RCC_PLL_GetMainSource>
 80017b8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d002      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0x62>
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d003      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0x68>
 80017c4:	e00d      	b.n	80017e2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_RCC_GetSysClockFreq+0xcc>)
 80017c8:	60bb      	str	r3, [r7, #8]
        break;
 80017ca:	e015      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80017cc:	f7fe ffa0 	bl	8000710 <LL_RCC_HSE_IsEnabledDiv2>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d102      	bne.n	80017dc <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_RCC_GetSysClockFreq+0xd0>)
 80017d8:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80017da:	e00d      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80017dc:	4b16      	ldr	r3, [pc, #88]	; (8001838 <HAL_RCC_GetSysClockFreq+0xd4>)
 80017de:	60bb      	str	r3, [r7, #8]
        break;
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80017e2:	f7ff f968 	bl	8000ab6 <LL_RCC_MSI_GetRange>
 80017e6:	4603      	mov	r3, r0
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <HAL_RCC_GetSysClockFreq+0xc8>)
 80017f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f4:	60bb      	str	r3, [r7, #8]
        break;
 80017f6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80017f8:	f7ff fa5a 	bl	8000cb0 <LL_RCC_PLL_GetN>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	fb03 f402 	mul.w	r4, r3, r2
 8001804:	f7ff fa6d 	bl	8000ce2 <LL_RCC_PLL_GetDivider>
 8001808:	4603      	mov	r3, r0
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	3301      	adds	r3, #1
 800180e:	fbb4 f4f3 	udiv	r4, r4, r3
 8001812:	f7ff fa5a 	bl	8000cca <LL_RCC_PLL_GetR>
 8001816:	4603      	mov	r3, r0
 8001818:	0f5b      	lsrs	r3, r3, #29
 800181a:	3301      	adds	r3, #1
 800181c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001820:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	080022f8 	.word	0x080022f8
 8001830:	00f42400 	.word	0x00f42400
 8001834:	003d0900 	.word	0x003d0900
 8001838:	007a1200 	.word	0x007a1200

0800183c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800183c:	b598      	push	{r3, r4, r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001840:	f7ff ff90 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8001844:	4604      	mov	r4, r0
 8001846:	f7ff f9e9 	bl	8000c1c <LL_RCC_GetAHBPrescaler>
 800184a:	4603      	mov	r3, r0
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	4a03      	ldr	r2, [pc, #12]	; (8001860 <HAL_RCC_GetHCLKFreq+0x24>)
 8001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001858:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800185c:	4618      	mov	r0, r3
 800185e:	bd98      	pop	{r3, r4, r7, pc}
 8001860:	080022b8 	.word	0x080022b8

08001864 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2bb0      	cmp	r3, #176	; 0xb0
 8001870:	d903      	bls.n	800187a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	e007      	b.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001888:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800188a:	f7ff f9d3 	bl	8000c34 <LL_RCC_GetAHB4Prescaler>
 800188e:	4603      	mov	r3, r0
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	0c9c      	lsrs	r4, r3, #18
 80018ae:	f7fe ff21 	bl	80006f4 <HAL_PWREx_GetVoltageRange>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4619      	mov	r1, r3
 80018b6:	4620      	mov	r0, r4
 80018b8:	f000 f80c 	bl	80018d4 <RCC_SetFlashLatency>
 80018bc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd90      	pop	{r4, r7, pc}
 80018c6:	bf00      	nop
 80018c8:	080022f8 	.word	0x080022f8
 80018cc:	080022b8 	.word	0x080022b8
 80018d0:	431bde83 	.word	0x431bde83

080018d4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b093      	sub	sp, #76	; 0x4c
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80018de:	4b39      	ldr	r3, [pc, #228]	; (80019c4 <RCC_SetFlashLatency+0xf0>)
 80018e0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80018e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80018ea:	4a37      	ldr	r2, [pc, #220]	; (80019c8 <RCC_SetFlashLatency+0xf4>)
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80018f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80018f6:	4b35      	ldr	r3, [pc, #212]	; (80019cc <RCC_SetFlashLatency+0xf8>)
 80018f8:	f107 040c 	add.w	r4, r7, #12
 80018fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001902:	2300      	movs	r3, #0
 8001904:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800190c:	d11c      	bne.n	8001948 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800190e:	2300      	movs	r3, #0
 8001910:	643b      	str	r3, [r7, #64]	; 0x40
 8001912:	e015      	b.n	8001940 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800191c:	4413      	add	r3, r2
 800191e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	d808      	bhi.n	800193a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001930:	4413      	add	r3, r2
 8001932:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001936:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001938:	e022      	b.n	8001980 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800193a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800193c:	3301      	adds	r3, #1
 800193e:	643b      	str	r3, [r7, #64]	; 0x40
 8001940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001942:	2b03      	cmp	r3, #3
 8001944:	d9e6      	bls.n	8001914 <RCC_SetFlashLatency+0x40>
 8001946:	e01b      	b.n	8001980 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001948:	2300      	movs	r3, #0
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800194c:	e015      	b.n	800197a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800194e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001956:	4413      	add	r3, r2
 8001958:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	429a      	cmp	r2, r3
 8001960:	d808      	bhi.n	8001974 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800196a:	4413      	add	r3, r2
 800196c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001970:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001972:	e005      	b.n	8001980 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001976:	3301      	adds	r3, #1
 8001978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800197a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800197c:	2b02      	cmp	r3, #2
 800197e:	d9e6      	bls.n	800194e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <RCC_SetFlashLatency+0xfc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 0207 	bic.w	r2, r3, #7
 8001988:	4911      	ldr	r1, [pc, #68]	; (80019d0 <RCC_SetFlashLatency+0xfc>)
 800198a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001990:	f7fe fda4 	bl	80004dc <HAL_GetTick>
 8001994:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001996:	e008      	b.n	80019aa <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001998:	f7fe fda0 	bl	80004dc <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e007      	b.n	80019ba <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <RCC_SetFlashLatency+0xfc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1ef      	bne.n	8001998 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	374c      	adds	r7, #76	; 0x4c
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd90      	pop	{r4, r7, pc}
 80019c2:	bf00      	nop
 80019c4:	0800228c 	.word	0x0800228c
 80019c8:	0800229c 	.word	0x0800229c
 80019cc:	080022a8 	.word	0x080022a8
 80019d0:	58004000 	.word	0x58004000

080019d4 <LL_RCC_LSE_IsEnabled>:
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80019d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <LL_RCC_LSE_IsEnabled+0x18>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <LL_RCC_LSE_IsEnabled+0x1a>
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_RCC_LSE_IsReady>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80019fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d101      	bne.n	8001a10 <LL_RCC_LSE_IsReady+0x18>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <LL_RCC_LSE_IsReady+0x1a>
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_RCC_SetRFWKPClockSource>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_RCC_SetSMPSClockSource>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	f023 0203 	bic.w	r2, r3, #3
 8001a5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_RCC_SetSMPSPrescaler>:
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_RCC_SetUSARTClockSource>:
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa8:	f023 0203 	bic.w	r2, r3, #3
 8001aac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_RCC_SetLPUARTClockSource>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ad8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_RCC_SetI2CClockSource>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_RCC_SetLPTIMClockSource>:
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	041b      	lsls	r3, r3, #16
 8001b40:	43db      	mvns	r3, r3
 8001b42:	401a      	ands	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_RCC_SetSAIClockSource>:
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8001b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <LL_RCC_SetRNGClockSource>:
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_RCC_SetCLK48ClockSource>:
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_RCC_SetUSBClockSource>:
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffe3 	bl	8001bb6 <LL_RCC_SetCLK48ClockSource>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <LL_RCC_SetADCClockSource>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8001c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001c0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_RCC_SetRTCClockSource>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_RCC_GetRTCClockSource>:
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_RCC_ForceBackupDomainReset>:
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_RCC_ReleaseBackupDomainReset>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_RCC_PLLSAI1_Enable>:
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cc0:	6013      	str	r3, [r2, #0]
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_RCC_PLLSAI1_Disable>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_RCC_PLLSAI1_IsReady>:
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cfc:	d101      	bne.n	8001d02 <LL_RCC_PLLSAI1_IsReady+0x18>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b088      	sub	sp, #32
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8001d16:	2300      	movs	r3, #0
 8001d18:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d033      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d32:	d00c      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d38:	d802      	bhi.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d010      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d3e:	e017      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001d40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d44:	d017      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001d46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d4a:	d016      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8001d4c:	e010      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8001d5e:	e00d      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3304      	adds	r3, #4
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 f947 	bl	8001ff8 <RCCEx_PLLSAI1_ConfigNP>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8001d6e:	e005      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	77fb      	strb	r3, [r7, #31]
        break;
 8001d74:	e002      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8001d76:	bf00      	nop
 8001d78:	e000      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8001d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001d7c:	7ffb      	ldrb	r3, [r7, #31]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d105      	bne.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fee9 	bl	8001b5e <LL_RCC_SetSAIClockSource>
 8001d8c:	e001      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d8e:	7ffb      	ldrb	r3, [r7, #31]
 8001d90:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d046      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8001d9e:	f7ff ff57 	bl	8001c50 <LL_RCC_GetRTCClockSource>
 8001da2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d03c      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001dae:	f7fe fc91 	bl	80006d4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d105      	bne.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff31 	bl	8001c24 <LL_RCC_SetRTCClockSource>
 8001dc2:	e02e      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8001dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dcc:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8001dce:	f7ff ff4c 	bl	8001c6a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8001dd2:	f7ff ff5b 	bl	8001c8c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8001de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8001dee:	f7ff fdf1 	bl	80019d4 <LL_RCC_LSE_IsEnabled>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d114      	bne.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001df8:	f7fe fb70 	bl	80004dc <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7fe fb6c 	bl	80004dc <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d902      	bls.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	77fb      	strb	r3, [r7, #31]
              break;
 8001e16:	e004      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8001e18:	f7ff fdee 	bl	80019f8 <LL_RCC_LSE_IsReady>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d1ee      	bne.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8001e22:	7ffb      	ldrb	r3, [r7, #31]
 8001e24:	77bb      	strb	r3, [r7, #30]
 8001e26:	e001      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e28:	7ffb      	ldrb	r3, [r7, #31]
 8001e2a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d004      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fe2b 	bl	8001a98 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fe36 	bl	8001ac4 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d004      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fe5e 	bl	8001b2a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fe53 	bl	8001b2a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d004      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fe2b 	bl	8001af0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fe20 	bl	8001af0 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d022      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fe8e 	bl	8001be2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8001ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ede:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ee8:	d10b      	bne.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f8dd 	bl	80020ae <RCCEx_PLLSAI1_ConfigNQ>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8001ef8:	7ffb      	ldrb	r3, [r7, #31]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8001efe:	7ffb      	ldrb	r3, [r7, #31]
 8001f00:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d02b      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f16:	d008      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f20:	d003      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d105      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fe2b 	bl	8001b8a <LL_RCC_SetRNGClockSource>
 8001f34:	e00a      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff fe22 	bl	8001b8a <LL_RCC_SetRNGClockSource>
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f7ff fe35 	bl	8001bb6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8001f54:	d107      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8001f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f64:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d022      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fe3e 	bl	8001bf8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f84:	d107      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f8dd 	bl	8002164 <RCCEx_PLLSAI1_ConfigNR>
 8001faa:	4603      	mov	r3, r0
 8001fac:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8001fae:	7ffb      	ldrb	r3, [r7, #31]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8001fb4:	7ffb      	ldrb	r3, [r7, #31]
 8001fb6:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fd27 	bl	8001a1c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fd46 	bl	8001a70 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fd2d 	bl	8001a48 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8001fee:	7fbb      	ldrb	r3, [r7, #30]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002004:	f7ff fe62 	bl	8001ccc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002008:	f7fe fa68 	bl	80004dc <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800200e:	e009      	b.n	8002024 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002010:	f7fe fa64 	bl	80004dc <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d902      	bls.n	8002024 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	73fb      	strb	r3, [r7, #15]
      break;
 8002022:	e004      	b.n	800202e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002024:	f7ff fe61 	bl	8001cea <LL_RCC_PLLSAI1_IsReady>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d137      	bne.n	80020a4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002048:	4313      	orrs	r3, r2
 800204a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800204c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800205e:	4313      	orrs	r3, r2
 8002060:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002062:	f7ff fe24 	bl	8001cae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002066:	f7fe fa39 	bl	80004dc <HAL_GetTick>
 800206a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800206c:	e009      	b.n	8002082 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800206e:	f7fe fa35 	bl	80004dc <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d902      	bls.n	8002082 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	73fb      	strb	r3, [r7, #15]
        break;
 8002080:	e004      	b.n	800208c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002082:	f7ff fe32 	bl	8001cea <LL_RCC_PLLSAI1_IsReady>
 8002086:	4603      	mov	r3, r0
 8002088:	2b01      	cmp	r3, #1
 800208a:	d1f0      	bne.n	800206e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d108      	bne.n	80020a4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020a0:	4313      	orrs	r3, r2
 80020a2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80020ba:	f7ff fe07 	bl	8001ccc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80020be:	f7fe fa0d 	bl	80004dc <HAL_GetTick>
 80020c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80020c4:	e009      	b.n	80020da <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020c6:	f7fe fa09 	bl	80004dc <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d902      	bls.n	80020da <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	73fb      	strb	r3, [r7, #15]
      break;
 80020d8:	e004      	b.n	80020e4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80020da:	f7ff fe06 	bl	8001cea <LL_RCC_PLLSAI1_IsReady>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f0      	bne.n	80020c6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d137      	bne.n	800215a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020fe:	4313      	orrs	r3, r2
 8002100:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002114:	4313      	orrs	r3, r2
 8002116:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002118:	f7ff fdc9 	bl	8001cae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800211c:	f7fe f9de 	bl	80004dc <HAL_GetTick>
 8002120:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002122:	e009      	b.n	8002138 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002124:	f7fe f9da 	bl	80004dc <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d902      	bls.n	8002138 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	73fb      	strb	r3, [r7, #15]
        break;
 8002136:	e004      	b.n	8002142 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002138:	f7ff fdd7 	bl	8001cea <LL_RCC_PLLSAI1_IsReady>
 800213c:	4603      	mov	r3, r0
 800213e:	2b01      	cmp	r3, #1
 8002140:	d1f0      	bne.n	8002124 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d108      	bne.n	800215a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002156:	4313      	orrs	r3, r2
 8002158:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800215a:	7bfb      	ldrb	r3, [r7, #15]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002170:	f7ff fdac 	bl	8001ccc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002174:	f7fe f9b2 	bl	80004dc <HAL_GetTick>
 8002178:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800217a:	e009      	b.n	8002190 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800217c:	f7fe f9ae 	bl	80004dc <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d902      	bls.n	8002190 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	73fb      	strb	r3, [r7, #15]
      break;
 800218e:	e004      	b.n	800219a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002190:	f7ff fdab 	bl	8001cea <LL_RCC_PLLSAI1_IsReady>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d137      	bne.n	8002210 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80021a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021b4:	4313      	orrs	r3, r2
 80021b6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80021b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ca:	4313      	orrs	r3, r2
 80021cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80021ce:	f7ff fd6e 	bl	8001cae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d2:	f7fe f983 	bl	80004dc <HAL_GetTick>
 80021d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80021d8:	e009      	b.n	80021ee <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021da:	f7fe f97f 	bl	80004dc <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d902      	bls.n	80021ee <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	73fb      	strb	r3, [r7, #15]
        break;
 80021ec:	e004      	b.n	80021f8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80021ee:	f7ff fd7c 	bl	8001cea <LL_RCC_PLLSAI1_IsReady>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d1f0      	bne.n	80021da <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d108      	bne.n	8002210 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800220c:	4313      	orrs	r3, r2
 800220e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <__libc_init_array>:
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	4e0d      	ldr	r6, [pc, #52]	; (8002254 <__libc_init_array+0x38>)
 8002220:	4c0d      	ldr	r4, [pc, #52]	; (8002258 <__libc_init_array+0x3c>)
 8002222:	1ba4      	subs	r4, r4, r6
 8002224:	10a4      	asrs	r4, r4, #2
 8002226:	2500      	movs	r5, #0
 8002228:	42a5      	cmp	r5, r4
 800222a:	d109      	bne.n	8002240 <__libc_init_array+0x24>
 800222c:	4e0b      	ldr	r6, [pc, #44]	; (800225c <__libc_init_array+0x40>)
 800222e:	4c0c      	ldr	r4, [pc, #48]	; (8002260 <__libc_init_array+0x44>)
 8002230:	f000 f820 	bl	8002274 <_init>
 8002234:	1ba4      	subs	r4, r4, r6
 8002236:	10a4      	asrs	r4, r4, #2
 8002238:	2500      	movs	r5, #0
 800223a:	42a5      	cmp	r5, r4
 800223c:	d105      	bne.n	800224a <__libc_init_array+0x2e>
 800223e:	bd70      	pop	{r4, r5, r6, pc}
 8002240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002244:	4798      	blx	r3
 8002246:	3501      	adds	r5, #1
 8002248:	e7ee      	b.n	8002228 <__libc_init_array+0xc>
 800224a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800224e:	4798      	blx	r3
 8002250:	3501      	adds	r5, #1
 8002252:	e7f2      	b.n	800223a <__libc_init_array+0x1e>
 8002254:	08002338 	.word	0x08002338
 8002258:	08002338 	.word	0x08002338
 800225c:	08002338 	.word	0x08002338
 8002260:	0800233c 	.word	0x0800233c

08002264 <memset>:
 8002264:	4402      	add	r2, r0
 8002266:	4603      	mov	r3, r0
 8002268:	4293      	cmp	r3, r2
 800226a:	d100      	bne.n	800226e <memset+0xa>
 800226c:	4770      	bx	lr
 800226e:	f803 1b01 	strb.w	r1, [r3], #1
 8002272:	e7f9      	b.n	8002268 <memset+0x4>

08002274 <_init>:
 8002274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002276:	bf00      	nop
 8002278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800227a:	bc08      	pop	{r3}
 800227c:	469e      	mov	lr, r3
 800227e:	4770      	bx	lr

08002280 <_fini>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	bf00      	nop
 8002284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002286:	bc08      	pop	{r3}
 8002288:	469e      	mov	lr, r3
 800228a:	4770      	bx	lr
